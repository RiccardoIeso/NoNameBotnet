#!/usr/bin/env python

from twisted.internet import protocol, reactor, endpoints
import json

glob_ip = [] #List of all ip connected
message = {} #Dict of messages
cnt_clients = 0 #Number of connected clients

class echoClient(protocol.Protocol):
    def connectionMade(self):
        global cnt_clients
        global glob_ip
        global message
        self.peer_host = self.transport.getPeer().host
        self.peer_port = self.transport.getPeer().port
        self.conc = [self.peer_host, str(self.peer_port)]
        self.client = ":".join(self.conc)
        glob_ip.append(self.peer_host)
        print('[*]Client %s:%s connected' %(self.peer_host, self.peer_port))
        cnt_clients += 1
        print('[%s]Clients status' %(cnt_clients))
        print('[*] Peer connected: '+str(glob_ip))
        #self.sendMessage(message)

    def connectionLost(self, reason):
        global cnt_clients
        global glob_ip
        cnt_clients -= 1
        glob_ip.remove(self.peer_host)
        print('[*] Client %s:%s disconnected' %(self.peer_host, self.peer_port))
        print('[%s] Client status ' %(cnt_clients))
        print('[*] Peer connected: '+str(glob_ip))

    def sendMessage(self, msg):
        print('message to client' +str(msg))
        self.transport.write(b'ciao')
        #for key in message:
        #    if message[key] == self.peer_host:
        #        self.transport.write(messagge[key])

class clientFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return echoClient()

class echoMaster(protocol.Protocol):
    def connectionMade(self):
        global glob_ip
        self.master_host = self.transport.getPeer().host
        print('*- Master [%s] connected -*' %(self.master_host))
        glob_ip_b = ":".join(glob_ip)
        self.transport.write(glob_ip_b.encode('utf-8'))

    def dataReceived(self, data):
        self.parseData(data)

    def connectionLost(self, reason):
        print('*- Master [%s] disconnected -*' %(self.master_host))
    
    def parseData(self, data):
        print(data)
        global message
        data = data.decode('utf-8')
        p_data = data.split(':')
        peer_ip = p_data[0]
        peer_msg = p_data[1]
        if peer_msg == 'klg':
            msg = message[peer_ip] = peer_msg
            echoClient.sendMessage(self, msg)              
        print(message)

class masterFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return echoMaster()

def main():
    endpoints.serverFromString(reactor, "tcp:8080:interface=127.0.0.1").listen(clientFactory())
    endpoints.serverFromString(reactor, "tcp:8081:interface=127.0.0.1").listen(masterFactory())
    reactor.run()

if __name__ == '__main__':
    main()
